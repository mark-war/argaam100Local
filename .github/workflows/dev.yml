name: CI/CD Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  contents: write # âœ… Add this to allow release creation

jobs:
  # Build Job (for Static Release)
  build:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Load environment variables from GitHub Secrets
        shell: powershell
        run: |
          Write-Output "VITE_API_URL=${{ secrets.VITE_API_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_APP_LOGIN_URL=${{ secrets.VITE_APP_LOGIN_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_APP_LOGOUT_URL=${{ secrets.VITE_APP_LOGOUT_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_APP_REGISTER_URL=${{ secrets.VITE_APP_REGISTER_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_BASE_URL=${{ secrets.VITE_BASE_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_CHARTS_API_URL=${{ secrets.VITE_CHARTS_API_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_CHARTS_URL=${{ secrets.VITE_CHARTS_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_DECIMALS=${{ secrets.VITE_DECIMALS }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_DEFAULT_LANGUAGE=${{ secrets.VITE_DEFAULT_LANGUAGE }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_DEFAULT_MARKETID=${{ secrets.VITE_DEFAULT_MARKETID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_EXPIRATION_IN_MINUTES=${{ secrets.VITE_EXPIRATION_IN_MINUTES }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_FREEPAGEID=${{ secrets.VITE_FREEPAGEID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_FREEPAGESUBID=${{ secrets.VITE_FREEPAGESUBID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_PE_FIELDIDS=${{ secrets.VITE_PE_FIELDIDS }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_REFRESH_ONRELOAD=${{ secrets.VITE_REFRESH_ONRELOAD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_SCREEENER_TABLE_ITEMS_PER_PAGE=${{ secrets.VITE_SCREEENER_TABLE_ITEMS_PER_PAGE }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_SUPPORTED_LANGUAGES=${{ secrets.VITE_SUPPORTED_LANGUAGES }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build:development

      - name: Check if dist directory exists
        shell: powershell
        run: |
          if (-Not (Test-Path -Path "dist")) {
            Write-Error "Build directory 'dist' not found. The build might have failed."
            exit 1
          }

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-release-${{ github.run_number }}
          path: dist

  # Build Job (for Static Release)
  static_deploy:
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: static-release-${{ github.run_number }}
          path: ${{ github.workspace }}/static-release-${{ github.run_number }}

      - name: Backup the current build folder
        shell: powershell
        run: |
          $timestamp = (Get-Date -Format "yyyyMMdd_HHmmss")
          $buildPath = "C:\Users\mark\Sites\build"
          $backupPath = "C:\Users\mark\Sites\build-backup-${timestamp}-${{ github.run_number }}.zip"
          # Check if the build folder exists
          if (Test-Path -Path $buildPath) {
              Compress-Archive -Path "$buildPath\*" -DestinationPath $backupPath
              Write-Output "Backup of the current build folder created at $backupPath."
          } else {
              Write-Error "Build folder '$buildPath' not found. Skipping backup."
          }

      - name: Overwrite the existing build folder with new content
        shell: powershell
        run: |
          $buildPath = "C:\Users\mark\Sites\build"
          $artifactPath = "$env:${{ github.workspace }}/static-release-${{ github.run_number }}"
          # Remove the existing build contents
          Remove-Item -Path "$buildPath\*" -Recurse -Force
          # Copy the new build content from the artifact
          Copy-Item -Path $artifactPath\* -Destination "$buildPath" -Recurse

      - name: Create Static Release
        uses: ncipollo/release-action@v1
        with:
          tag: static-release-${{ github.run_number }}
          name: "Static Release ${{ github.run_number }}"
          body: "Static files for release ${{ github.run_number }}."
          draft: false
          prerelease: false

  # Docker Build Job
  docker_build:
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Build Docker image
        shell: powershell
        run: |
          docker build -t my-app:$env:GITHUB_SHA .

  # Docker Push Job
  docker_push:
    runs-on: [self-hosted, windows]
    needs: docker_build
    steps:
      - name: Docker Login
        shell: powershell
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push Docker image
        shell: powershell
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:${{ github.sha }}

      - name: Restart IIS to apply changes
        shell: powershell
        run: |
          iisreset /restart

  # Docker Deploy Job
  docker_deploy:
    runs-on: [self-hosted, windows]
    needs: docker_push
    steps:
      - name: Pull Docker image
        shell: powershell
        run: |
          docker pull my-app:${{ github.sha }}

      - name: Deploy Docker container
        shell: powershell
        run: |
          docker run -d -p 80:80 my-app:${{ github.sha }}
