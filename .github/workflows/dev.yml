name: CI/CD Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: windows-latest # Change to self-hosted if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Load environment variables from GitHub Secrets
        shell: powershell
        run: |
          @"
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_APP_LOGIN_URL=${{ secrets.VITE_APP_LOGIN_URL }}
          VITE_APP_LOGOUT_URL=${{ secrets.VITE_APP_LOGOUT_URL }}
          VITE_APP_REGISTER_URL=${{ secrets.VITE_APP_REGISTER_URL }}
          VITE_BASE_URL=${{ secrets.VITE_BASE_URL }}
          VITE_CHARTS_API_URL=${{ secrets.VITE_CHARTS_API_URL }}
          VITE_CHARTS_URL=${{ secrets.VITE_CHARTS_URL }}
          VITE_DECIMALS=${{ secrets.VITE_DECIMALS }}
          VITE_DEFAULT_LANGUAGE=${{ secrets.VITE_DEFAULT_LANGUAGE }}
          VITE_DEFAULT_MARKETID=${{ secrets.VITE_DEFAULT_MARKETID }}
          VITE_EXPIRATION_IN_MINUTES=${{ secrets.VITE_EXPIRATION_IN_MINUTES }}
          VITE_FREEPAGEID=${{ secrets.VITE_FREEPAGEID }}
          VITE_FREEPAGESUBID=${{ secrets.VITE_FREEPAGESUBID }}
          VITE_PE_FIELDIDS=${{ secrets.VITE_PE_FIELDIDS }}
          VITE_REFRESH_ONRELOAD=${{ secrets.VITE_REFRESH_ONRELOAD }}
          VITE_SCREEENER_TABLE_ITEMS_PER_PAGE=${{ secrets.VITE_SCREEENER_TABLE_ITEMS_PER_PAGE }}
          VITE_SUPPORTED_LANGUAGES=${{ secrets.VITE_SUPPORTED_LANGUAGES }}
          "@ | Out-File -FilePath .env -Encoding utf8

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Copy files to deployment directory
        shell: powershell
        run: |
          $destinationPath = "C:\inetpub\wwwroot\argaam100\dist"
          if (-Not (Test-Path -Path $destinationPath)) {
            New-Item -ItemType Directory -Path $destinationPath -Force
          }
          Copy-Item -Path "dist\*" -Destination $destinationPath -Recurse -Force
          Write-Host "Deployment successful to $destinationPath"
