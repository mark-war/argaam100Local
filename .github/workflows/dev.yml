name: CI/CD Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  contents: write # âœ… Add this to allow release creation

jobs:
  # Build Job (for Static Release)
  build:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Load environment variables from GitHub Secrets
        shell: powershell
        run: |
          Write-Output "VITE_API_URL=${{ secrets.VITE_API_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_APP_LOGIN_URL=${{ secrets.VITE_APP_LOGIN_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_APP_LOGOUT_URL=${{ secrets.VITE_APP_LOGOUT_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_APP_REGISTER_URL=${{ secrets.VITE_APP_REGISTER_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_BASE_URL=${{ secrets.VITE_BASE_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_CHARTS_API_URL=${{ secrets.VITE_CHARTS_API_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_CHARTS_URL=${{ secrets.VITE_CHARTS_URL }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_DECIMALS=${{ secrets.VITE_DECIMALS }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_DEFAULT_LANGUAGE=${{ secrets.VITE_DEFAULT_LANGUAGE }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_DEFAULT_MARKETID=${{ secrets.VITE_DEFAULT_MARKETID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_EXPIRATION_IN_MINUTES=${{ secrets.VITE_EXPIRATION_IN_MINUTES }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_FREEPAGEID=${{ secrets.VITE_FREEPAGEID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_FREEPAGESUBID=${{ secrets.VITE_FREEPAGESUBID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_PE_FIELDIDS=${{ secrets.VITE_PE_FIELDIDS }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_REFRESH_ONRELOAD=${{ secrets.VITE_REFRESH_ONRELOAD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_SCREEENER_TABLE_ITEMS_PER_PAGE=${{ secrets.VITE_SCREEENER_TABLE_ITEMS_PER_PAGE }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "VITE_SUPPORTED_LANGUAGES=${{ secrets.VITE_SUPPORTED_LANGUAGES }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build:development

      - name: Check if dist directory exists
        shell: powershell
        run: |
          if (-Not (Test-Path -Path "dist")) {
            Write-Error "Build directory 'dist' not found. The build might have failed."
            exit 1
          }

      # Step to Backup Current build folder
      - name: Backup current build folder (zip)
        shell: powershell
        run: |
          $timestamp = (Get-Date -Format "yyyyMMdd_HHmmss")
          $buildPath = "./build/"

          # Check if the build directory exists
          if (Test-Path -Path $buildPath) {
              Compress-Archive -Path "$buildPath*" -DestinationPath "./build-backup-${timestamp}.zip"
          } else {
              Write-Error "Build directory '$buildPath' not found. Skipping compression."
          }

      # Upload the backup artifact
      - name: Upload Build Backup Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-backup-${{ github.run_number }}
          path: "./build-backup-${timestamp}.zip"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-release-${{ github.run_number }}
          path: dist

  # Docker Build & Push Job
  docker:
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: static-release-${{ github.run_number }}
          path: dist

      - name: Log in to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin "${{ secrets.DOCKER_HUB_PASSWORD }}"

      - name: Build Docker Image
        run: docker build -t myapp:${{ github.run_number }} .

      - name: Tag Docker Image
        run: |
          docker tag myapp:${{ github.run_number }} mydockerhubuser/myapp:${{ github.run_number }}
          docker tag myapp:${{ github.run_number }} mydockerhubuser/myapp:latest

      - name: Push Docker Image to Docker Hub
        run: |
          docker push mydockerhubuser/myapp:${{ github.run_number }}
          docker push mydockerhubuser/myapp:latest

  # Static Release Deployment Job
  deploy_static:
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: static-release-${{ github.run_number }}
          path: C:\Users\mark\Sites\build

      - name: Restart IIS to apply changes
        run: iisreset /restart

      - name: Create Static Release
        uses: ncipollo/release-action@v1
        with:
          tag: static-release-${{ github.run_number }}
          name: "Static Release ${{ github.run_number }}"
          body: "Static files for release ${{ github.run_number }}."
          draft: false
          prerelease: false

  # Docker Release Deployment Job
  deploy_docker:
    runs-on: [self-hosted, windows]
    needs: docker
    steps:
      - name: Pull latest Docker Image
        run: docker pull mydockerhubuser/myapp:${{ github.run_number }}

      - name: Stop and remove old container
        run: |
          docker stop myapp || true
          docker rm myapp || true

      - name: Run the container temporarily to extract files
        run: |
          docker create --name temp-container mydockerhubuser/myapp:${{ github.run_number }}
          docker cp temp-container:/usr/share/nginx/html C:\Users\mark\Sites\docker-build-${{ github.run_number }}
          docker rm temp-container

      - name: Restart IIS to apply changes
        run: iisreset /restart

      - name: Create Docker Release
        uses: ncipollo/release-action@v1
        with:
          tag: docker-release-${{ github.run_number }}
          name: "Docker Release ${{ github.run_number }}"
          body: "Docker build for release ${{ github.run_number }}."
          draft: false
          prerelease: false
